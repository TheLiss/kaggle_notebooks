{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":3136,"databundleVersionId":26502,"sourceType":"competition"}],"dockerImageVersionId":30804,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2024-12-08T17:57:37.553090Z","iopub.execute_input":"2024-12-08T17:57:37.553487Z","iopub.status.idle":"2024-12-08T17:57:38.811065Z","shell.execute_reply.started":"2024-12-08T17:57:37.553457Z","shell.execute_reply":"2024-12-08T17:57:38.810229Z"}},"outputs":[],"execution_count":2},{"cell_type":"code","source":"train_data = pd.read_csv(\"/kaggle/input/titanic/train.csv\")\ntest_data = pd.read_csv(\"/kaggle/input/titanic/test.csv\")\ntrain_data.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T17:57:38.812855Z","iopub.execute_input":"2024-12-08T17:57:38.813346Z","iopub.status.idle":"2024-12-08T17:57:38.861384Z","shell.execute_reply.started":"2024-12-08T17:57:38.813312Z","shell.execute_reply":"2024-12-08T17:57:38.860354Z"}},"outputs":[{"execution_count":3,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Survived  Pclass  \\\n0            1         0       3   \n1            2         1       1   \n2            3         1       3   \n3            4         1       1   \n4            5         0       3   \n\n                                                Name     Sex   Age  SibSp  \\\n0                            Braund, Mr. Owen Harris    male  22.0      1   \n1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n2                             Heikkinen, Miss. Laina  female  26.0      0   \n3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n4                           Allen, Mr. William Henry    male  35.0      0   \n\n   Parch            Ticket     Fare Cabin Embarked  \n0      0         A/5 21171   7.2500   NaN        S  \n1      0          PC 17599  71.2833   C85        C  \n2      0  STON/O2. 3101282   7.9250   NaN        S  \n3      0            113803  53.1000  C123        S  \n4      0            373450   8.0500   NaN        S  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Braund, Mr. Owen Harris</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>A/5 21171</td>\n      <td>7.2500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17599</td>\n      <td>71.2833</td>\n      <td>C85</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>Heikkinen, Miss. Laina</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>STON/O2. 3101282</td>\n      <td>7.9250</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113803</td>\n      <td>53.1000</td>\n      <td>C123</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Allen, Mr. William Henry</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>373450</td>\n      <td>8.0500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":3},{"cell_type":"code","source":"X_data = train_data[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked']]\nX_test = test_data[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked']]\ny_data = train_data['Survived']","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T18:10:57.516563Z","iopub.execute_input":"2024-12-08T18:10:57.516933Z","iopub.status.idle":"2024-12-08T18:10:57.524228Z","shell.execute_reply.started":"2024-12-08T18:10:57.516900Z","shell.execute_reply":"2024-12-08T18:10:57.523081Z"}},"outputs":[],"execution_count":41},{"cell_type":"code","source":"X_data.info()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T18:10:58.033643Z","iopub.execute_input":"2024-12-08T18:10:58.034040Z","iopub.status.idle":"2024-12-08T18:10:58.045424Z","shell.execute_reply.started":"2024-12-08T18:10:58.033999Z","shell.execute_reply":"2024-12-08T18:10:58.044276Z"}},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 891 entries, 0 to 890\nData columns (total 7 columns):\n #   Column    Non-Null Count  Dtype  \n---  ------    --------------  -----  \n 0   Pclass    891 non-null    int64  \n 1   Sex       891 non-null    object \n 2   Age       714 non-null    float64\n 3   SibSp     891 non-null    int64  \n 4   Parch     891 non-null    int64  \n 5   Fare      891 non-null    float64\n 6   Embarked  889 non-null    object \ndtypes: float64(2), int64(3), object(2)\nmemory usage: 48.9+ KB\n","output_type":"stream"}],"execution_count":42},{"cell_type":"code","source":"pd.options.mode.chained_assignment = None","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T18:10:58.601916Z","iopub.execute_input":"2024-12-08T18:10:58.602325Z","iopub.status.idle":"2024-12-08T18:10:58.607207Z","shell.execute_reply.started":"2024-12-08T18:10:58.602289Z","shell.execute_reply":"2024-12-08T18:10:58.606107Z"}},"outputs":[],"execution_count":43},{"cell_type":"code","source":"X_data.loc[:, 'Age'] = X_data['Age'].fillna(X_data['Age'].mean())\nX_test.loc[:, 'Age'] = X_test['Age'].fillna(X_data['Age'].mean())\nX_data.loc[:, 'Embarked'] = X_data['Embarked'].fillna(X_data['Embarked'].mode()[0])\nX_test.loc[:, 'Embarked'] = X_test['Embarked'].fillna(X_data['Embarked'].mode()[0])\nX_data.loc[:, 'CabinLetter'] = train_data['Cabin'].fillna('N')\nX_test.loc[:, 'CabinLetter'] = test_data['Cabin'].fillna('N')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T18:11:08.160797Z","iopub.execute_input":"2024-12-08T18:11:08.161201Z","iopub.status.idle":"2024-12-08T18:11:08.175339Z","shell.execute_reply.started":"2024-12-08T18:11:08.161167Z","shell.execute_reply":"2024-12-08T18:11:08.174209Z"}},"outputs":[],"execution_count":44},{"cell_type":"code","source":"X_data.info()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T18:11:10.793674Z","iopub.execute_input":"2024-12-08T18:11:10.794067Z","iopub.status.idle":"2024-12-08T18:11:10.805292Z","shell.execute_reply.started":"2024-12-08T18:11:10.794030Z","shell.execute_reply":"2024-12-08T18:11:10.804126Z"}},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 891 entries, 0 to 890\nData columns (total 8 columns):\n #   Column       Non-Null Count  Dtype  \n---  ------       --------------  -----  \n 0   Pclass       891 non-null    int64  \n 1   Sex          891 non-null    object \n 2   Age          891 non-null    float64\n 3   SibSp        891 non-null    int64  \n 4   Parch        891 non-null    int64  \n 5   Fare         891 non-null    float64\n 6   Embarked     891 non-null    object \n 7   CabinLetter  891 non-null    object \ndtypes: float64(2), int64(3), object(3)\nmemory usage: 55.8+ KB\n","output_type":"stream"}],"execution_count":45},{"cell_type":"code","source":"X_data['CabinLetter'] = X_data['CabinLetter'].apply(lambda x: x.split()[0][0])\nX_test['CabinLetter'] = X_test['CabinLetter'].apply(lambda x: x.split()[0][0])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T18:12:58.375679Z","iopub.execute_input":"2024-12-08T18:12:58.376161Z","iopub.status.idle":"2024-12-08T18:12:58.384418Z","shell.execute_reply.started":"2024-12-08T18:12:58.376112Z","shell.execute_reply":"2024-12-08T18:12:58.383175Z"}},"outputs":[],"execution_count":48},{"cell_type":"code","source":"X_data.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T18:13:06.989689Z","iopub.execute_input":"2024-12-08T18:13:06.990080Z","iopub.status.idle":"2024-12-08T18:13:07.003972Z","shell.execute_reply.started":"2024-12-08T18:13:06.990042Z","shell.execute_reply":"2024-12-08T18:13:07.002708Z"}},"outputs":[{"execution_count":49,"output_type":"execute_result","data":{"text/plain":"   Pclass     Sex   Age  SibSp  Parch     Fare Embarked CabinLetter\n0       3    male  22.0      1      0   7.2500        S           N\n1       1  female  38.0      1      0  71.2833        C           C\n2       3  female  26.0      0      0   7.9250        S           N\n3       1  female  35.0      1      0  53.1000        S           C\n4       3    male  35.0      0      0   8.0500        S           N","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n      <th>CabinLetter</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>3</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>7.2500</td>\n      <td>S</td>\n      <td>N</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>71.2833</td>\n      <td>C</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.9250</td>\n      <td>S</td>\n      <td>N</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>53.1000</td>\n      <td>S</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>3</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.0500</td>\n      <td>S</td>\n      <td>N</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":49},{"cell_type":"code","source":"X_data = pd.get_dummies(X_data, columns=['Sex', 'SibSp', 'Embarked', 'CabinLetter'])\nX_test = pd.get_dummies(X_test, columns=['Sex', 'SibSp', 'Embarked', 'CabinLetter'])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T18:15:00.555525Z","iopub.execute_input":"2024-12-08T18:15:00.555903Z","iopub.status.idle":"2024-12-08T18:15:00.574325Z","shell.execute_reply.started":"2024-12-08T18:15:00.555870Z","shell.execute_reply":"2024-12-08T18:15:00.573003Z"}},"outputs":[],"execution_count":52},{"cell_type":"code","source":"set(X_data.columns) - set(X_test.columns)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T18:16:36.959065Z","iopub.execute_input":"2024-12-08T18:16:36.960191Z","iopub.status.idle":"2024-12-08T18:16:36.965889Z","shell.execute_reply.started":"2024-12-08T18:16:36.960131Z","shell.execute_reply":"2024-12-08T18:16:36.965132Z"}},"outputs":[{"execution_count":58,"output_type":"execute_result","data":{"text/plain":"set()"},"metadata":{}}],"execution_count":58},{"cell_type":"code","source":"X_test['CabinLetter_T'] = False","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T18:16:43.322926Z","iopub.execute_input":"2024-12-08T18:16:43.323717Z","iopub.status.idle":"2024-12-08T18:16:43.328274Z","shell.execute_reply.started":"2024-12-08T18:16:43.323679Z","shell.execute_reply":"2024-12-08T18:16:43.327166Z"}},"outputs":[],"execution_count":59},{"cell_type":"code","source":"from sklearn.ensemble import RandomForestClassifier","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T18:17:05.530891Z","iopub.execute_input":"2024-12-08T18:17:05.531777Z","iopub.status.idle":"2024-12-08T18:17:05.535689Z","shell.execute_reply.started":"2024-12-08T18:17:05.531738Z","shell.execute_reply":"2024-12-08T18:17:05.534719Z"}},"outputs":[],"execution_count":60},{"cell_type":"code","source":"forest = RandomForestClassifier(n_jobs=-1)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T18:17:21.090162Z","iopub.execute_input":"2024-12-08T18:17:21.090585Z","iopub.status.idle":"2024-12-08T18:17:21.095173Z","shell.execute_reply.started":"2024-12-08T18:17:21.090550Z","shell.execute_reply":"2024-12-08T18:17:21.094034Z"}},"outputs":[],"execution_count":61},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T18:19:08.077353Z","iopub.execute_input":"2024-12-08T18:19:08.077735Z","iopub.status.idle":"2024-12-08T18:19:08.082405Z","shell.execute_reply.started":"2024-12-08T18:19:08.077702Z","shell.execute_reply":"2024-12-08T18:19:08.081390Z"}},"outputs":[],"execution_count":66},{"cell_type":"code","source":"X_train, X_holdout, y_train, y_holdout = train_test_split(X_data, y_data, train_size=0.7)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T18:19:53.107324Z","iopub.execute_input":"2024-12-08T18:19:53.107737Z","iopub.status.idle":"2024-12-08T18:19:53.117027Z","shell.execute_reply.started":"2024-12-08T18:19:53.107704Z","shell.execute_reply":"2024-12-08T18:19:53.115907Z"}},"outputs":[],"execution_count":67},{"cell_type":"code","source":"forest.fit(X_train, y_train)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T18:20:01.943346Z","iopub.execute_input":"2024-12-08T18:20:01.943736Z","iopub.status.idle":"2024-12-08T18:20:02.280802Z","shell.execute_reply.started":"2024-12-08T18:20:01.943702Z","shell.execute_reply":"2024-12-08T18:20:02.279568Z"}},"outputs":[{"execution_count":68,"output_type":"execute_result","data":{"text/plain":"RandomForestClassifier(n_jobs=-1)","text/html":"<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier(n_jobs=-1)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(n_jobs=-1)</pre></div></div></div></div></div>"},"metadata":{}}],"execution_count":68},{"cell_type":"code","source":"from sklearn.metrics import accuracy_score","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T18:20:05.689680Z","iopub.execute_input":"2024-12-08T18:20:05.690082Z","iopub.status.idle":"2024-12-08T18:20:05.695489Z","shell.execute_reply.started":"2024-12-08T18:20:05.690029Z","shell.execute_reply":"2024-12-08T18:20:05.694047Z"}},"outputs":[],"execution_count":69},{"cell_type":"code","source":"print(f'train_data accuracy = {accuracy_score(forest.predict(X_data), y_data)}')\nprint(f'holdout_data accuracy = {accuracy_score(forest.predict(X_holdout), y_holdout)}')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T18:21:04.253560Z","iopub.execute_input":"2024-12-08T18:21:04.253948Z","iopub.status.idle":"2024-12-08T18:21:04.368863Z","shell.execute_reply.started":"2024-12-08T18:21:04.253913Z","shell.execute_reply":"2024-12-08T18:21:04.367738Z"}},"outputs":[{"name":"stdout","text":"train_data accuracy = 0.936026936026936\nholdout_data accuracy = 0.8134328358208955\n","output_type":"stream"}],"execution_count":70},{"cell_type":"markdown","source":"class sklearn.ensemble.RandomForestClassifier(n_estimators=100, *, criterion='gini', max_depth=None, min_samples_split=2, min_samples_leaf=1, min_weight_fraction_leaf=0.0, max_features='sqrt', max_leaf_nodes=None, min_impurity_decrease=0.0, bootstrap=True, oob_score=False, n_jobs=None, random_state=None, verbose=0, warm_start=False, class_weight=None, ccp_alpha=0.0, max_samples=None, monotonic_cst=None)","metadata":{}},{"cell_type":"code","source":"forest_params = {'max_depth': list(range(5,10)), 'min_samples_leaf': list(range(1,5))}","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T18:23:12.171835Z","iopub.execute_input":"2024-12-08T18:23:12.172761Z","iopub.status.idle":"2024-12-08T18:23:12.177613Z","shell.execute_reply.started":"2024-12-08T18:23:12.172720Z","shell.execute_reply":"2024-12-08T18:23:12.176457Z"}},"outputs":[],"execution_count":72},{"cell_type":"code","source":"from sklearn.model_selection import GridSearchCV","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T18:23:31.585322Z","iopub.execute_input":"2024-12-08T18:23:31.585718Z","iopub.status.idle":"2024-12-08T18:23:31.590403Z","shell.execute_reply.started":"2024-12-08T18:23:31.585684Z","shell.execute_reply":"2024-12-08T18:23:31.589302Z"}},"outputs":[],"execution_count":73},{"cell_type":"code","source":"forest_grid = GridSearchCV(forest, param_grid=forest_params, n_jobs=-1, verbose=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T18:24:11.742873Z","iopub.execute_input":"2024-12-08T18:24:11.743295Z","iopub.status.idle":"2024-12-08T18:24:11.748685Z","shell.execute_reply.started":"2024-12-08T18:24:11.743254Z","shell.execute_reply":"2024-12-08T18:24:11.747533Z"}},"outputs":[],"execution_count":74},{"cell_type":"code","source":"forest_grid.fit(X_train, y_train)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T18:24:25.474653Z","iopub.execute_input":"2024-12-08T18:24:25.475027Z","iopub.status.idle":"2024-12-08T18:24:39.388768Z","shell.execute_reply.started":"2024-12-08T18:24:25.474994Z","shell.execute_reply":"2024-12-08T18:24:39.387571Z"}},"outputs":[{"name":"stdout","text":"Fitting 5 folds for each of 20 candidates, totalling 100 fits\n","output_type":"stream"},{"execution_count":75,"output_type":"execute_result","data":{"text/plain":"GridSearchCV(estimator=RandomForestClassifier(n_jobs=-1), n_jobs=-1,\n             param_grid={'max_depth': [5, 6, 7, 8, 9],\n                         'min_samples_leaf': [1, 2, 3, 4]},\n             verbose=True)","text/html":"<style>#sk-container-id-3 {color: black;background-color: white;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(estimator=RandomForestClassifier(n_jobs=-1), n_jobs=-1,\n             param_grid={&#x27;max_depth&#x27;: [5, 6, 7, 8, 9],\n                         &#x27;min_samples_leaf&#x27;: [1, 2, 3, 4]},\n             verbose=True)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GridSearchCV</label><div class=\"sk-toggleable__content\"><pre>GridSearchCV(estimator=RandomForestClassifier(n_jobs=-1), n_jobs=-1,\n             param_grid={&#x27;max_depth&#x27;: [5, 6, 7, 8, 9],\n                         &#x27;min_samples_leaf&#x27;: [1, 2, 3, 4]},\n             verbose=True)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(n_jobs=-1)</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" ><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(n_jobs=-1)</pre></div></div></div></div></div></div></div></div></div></div>"},"metadata":{}}],"execution_count":75},{"cell_type":"code","source":"print(f'best forest train_data accuracy = {accuracy_score(forest_grid.predict(X_data), y_data)}')\nprint(f'best forest holdout_data accuracy = {accuracy_score(forest_grid.predict(X_holdout), y_holdout)}')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T18:25:13.278853Z","iopub.execute_input":"2024-12-08T18:25:13.279271Z","iopub.status.idle":"2024-12-08T18:25:13.384520Z","shell.execute_reply.started":"2024-12-08T18:25:13.279230Z","shell.execute_reply":"2024-12-08T18:25:13.383433Z"}},"outputs":[{"name":"stdout","text":"best forest train_data accuracy = 0.8597081930415263\nbest forest holdout_data accuracy = 0.8134328358208955\n","output_type":"stream"}],"execution_count":76},{"cell_type":"code","source":"X_test.info()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T18:26:34.602111Z","iopub.execute_input":"2024-12-08T18:26:34.602649Z","iopub.status.idle":"2024-12-08T18:26:34.619973Z","shell.execute_reply.started":"2024-12-08T18:26:34.602599Z","shell.execute_reply":"2024-12-08T18:26:34.618620Z"}},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 418 entries, 0 to 417\nData columns (total 25 columns):\n #   Column         Non-Null Count  Dtype  \n---  ------         --------------  -----  \n 0   Pclass         418 non-null    int64  \n 1   Age            418 non-null    float64\n 2   Parch          418 non-null    int64  \n 3   Fare           417 non-null    float64\n 4   Sex_female     418 non-null    bool   \n 5   Sex_male       418 non-null    bool   \n 6   SibSp_0        418 non-null    bool   \n 7   SibSp_1        418 non-null    bool   \n 8   SibSp_2        418 non-null    bool   \n 9   SibSp_3        418 non-null    bool   \n 10  SibSp_4        418 non-null    bool   \n 11  SibSp_5        418 non-null    bool   \n 12  SibSp_8        418 non-null    bool   \n 13  Embarked_C     418 non-null    bool   \n 14  Embarked_Q     418 non-null    bool   \n 15  Embarked_S     418 non-null    bool   \n 16  CabinLetter_A  418 non-null    bool   \n 17  CabinLetter_B  418 non-null    bool   \n 18  CabinLetter_C  418 non-null    bool   \n 19  CabinLetter_D  418 non-null    bool   \n 20  CabinLetter_E  418 non-null    bool   \n 21  CabinLetter_F  418 non-null    bool   \n 22  CabinLetter_G  418 non-null    bool   \n 23  CabinLetter_N  418 non-null    bool   \n 24  CabinLetter_T  418 non-null    bool   \ndtypes: bool(21), float64(2), int64(2)\nmemory usage: 21.8 KB\n","output_type":"stream"}],"execution_count":79},{"cell_type":"code","source":"X_test.loc[:, 'Fare'] = X_test['Fare'].fillna(X_test['Fare'].mean())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T18:28:02.455838Z","iopub.execute_input":"2024-12-08T18:28:02.456283Z","iopub.status.idle":"2024-12-08T18:28:02.462745Z","shell.execute_reply.started":"2024-12-08T18:28:02.456244Z","shell.execute_reply":"2024-12-08T18:28:02.461612Z"}},"outputs":[],"execution_count":82},{"cell_type":"code","source":"prediction = forest_grid.predict(X_test)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T18:28:05.724340Z","iopub.execute_input":"2024-12-08T18:28:05.724714Z","iopub.status.idle":"2024-12-08T18:28:05.778132Z","shell.execute_reply.started":"2024-12-08T18:28:05.724683Z","shell.execute_reply":"2024-12-08T18:28:05.777288Z"}},"outputs":[],"execution_count":83},{"cell_type":"code","source":"submission = pd.DataFrame({'PassengerID':test_data['PassengerId'], 'Survived': prediction})","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T18:31:37.289211Z","iopub.execute_input":"2024-12-08T18:31:37.289647Z","iopub.status.idle":"2024-12-08T18:31:37.295525Z","shell.execute_reply.started":"2024-12-08T18:31:37.289612Z","shell.execute_reply":"2024-12-08T18:31:37.294347Z"}},"outputs":[],"execution_count":89},{"cell_type":"code","source":"submission.to_csv('submission.csv', index=False)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T18:32:53.191843Z","iopub.execute_input":"2024-12-08T18:32:53.192915Z","iopub.status.idle":"2024-12-08T18:32:53.199940Z","shell.execute_reply.started":"2024-12-08T18:32:53.192856Z","shell.execute_reply":"2024-12-08T18:32:53.198881Z"}},"outputs":[],"execution_count":91},{"cell_type":"code","source":"pd.read_csv('submission.csv')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T18:33:20.553367Z","iopub.execute_input":"2024-12-08T18:33:20.554301Z","iopub.status.idle":"2024-12-08T18:33:20.566529Z","shell.execute_reply.started":"2024-12-08T18:33:20.554254Z","shell.execute_reply":"2024-12-08T18:33:20.565414Z"}},"outputs":[{"execution_count":92,"output_type":"execute_result","data":{"text/plain":"     PassengerID  Survived\n0            892         0\n1            893         0\n2            894         0\n3            895         0\n4            896         0\n..           ...       ...\n413         1305         0\n414         1306         1\n415         1307         0\n416         1308         0\n417         1309         0\n\n[418 rows x 2 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerID</th>\n      <th>Survived</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>892</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>893</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>894</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>895</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>896</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>413</th>\n      <td>1305</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>414</th>\n      <td>1306</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>415</th>\n      <td>1307</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>416</th>\n      <td>1308</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>417</th>\n      <td>1309</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>418 rows × 2 columns</p>\n</div>"},"metadata":{}}],"execution_count":92},{"cell_type":"code","source":"pd.DataFrame({'feature': X_train.columns, 'importance': forest_grid.best_estimator_.feature_importances_}).sort_values('importance', ascending=False)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T18:41:26.814900Z","iopub.execute_input":"2024-12-08T18:41:26.815774Z","iopub.status.idle":"2024-12-08T18:41:26.851744Z","shell.execute_reply.started":"2024-12-08T18:41:26.815740Z","shell.execute_reply":"2024-12-08T18:41:26.850599Z"}},"outputs":[{"execution_count":97,"output_type":"execute_result","data":{"text/plain":"          feature  importance\n4      Sex_female    0.256301\n5        Sex_male    0.191128\n3            Fare    0.153145\n1             Age    0.099094\n0          Pclass    0.089275\n23  CabinLetter_N    0.049257\n2           Parch    0.028492\n13     Embarked_C    0.019649\n6         SibSp_0    0.017745\n15     Embarked_S    0.014320\n7         SibSp_1    0.012718\n10        SibSp_4    0.011065\n17  CabinLetter_B    0.010320\n19  CabinLetter_D    0.008726\n18  CabinLetter_C    0.007453\n14     Embarked_Q    0.006502\n20  CabinLetter_E    0.006327\n9         SibSp_3    0.005108\n16  CabinLetter_A    0.003573\n21  CabinLetter_F    0.003329\n12        SibSp_8    0.002856\n8         SibSp_2    0.002030\n22  CabinLetter_G    0.001426\n11        SibSp_5    0.000162\n24  CabinLetter_T    0.000000","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>feature</th>\n      <th>importance</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>4</th>\n      <td>Sex_female</td>\n      <td>0.256301</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Sex_male</td>\n      <td>0.191128</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Fare</td>\n      <td>0.153145</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Age</td>\n      <td>0.099094</td>\n    </tr>\n    <tr>\n      <th>0</th>\n      <td>Pclass</td>\n      <td>0.089275</td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <td>CabinLetter_N</td>\n      <td>0.049257</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Parch</td>\n      <td>0.028492</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>Embarked_C</td>\n      <td>0.019649</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>SibSp_0</td>\n      <td>0.017745</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>Embarked_S</td>\n      <td>0.014320</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>SibSp_1</td>\n      <td>0.012718</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>SibSp_4</td>\n      <td>0.011065</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>CabinLetter_B</td>\n      <td>0.010320</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>CabinLetter_D</td>\n      <td>0.008726</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>CabinLetter_C</td>\n      <td>0.007453</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>Embarked_Q</td>\n      <td>0.006502</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>CabinLetter_E</td>\n      <td>0.006327</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>SibSp_3</td>\n      <td>0.005108</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>CabinLetter_A</td>\n      <td>0.003573</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>CabinLetter_F</td>\n      <td>0.003329</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>SibSp_8</td>\n      <td>0.002856</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>SibSp_2</td>\n      <td>0.002030</td>\n    </tr>\n    <tr>\n      <th>22</th>\n      <td>CabinLetter_G</td>\n      <td>0.001426</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>SibSp_5</td>\n      <td>0.000162</td>\n    </tr>\n    <tr>\n      <th>24</th>\n      <td>CabinLetter_T</td>\n      <td>0.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":97},{"cell_type":"markdown","source":"So, Cabin letter doesnt affect, but its existance affect","metadata":{}},{"cell_type":"code","source":"X_data = train_data[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked', 'Cabin']]\nX_test = test_data[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked', 'Cabin']]\ny_data = train_data['Survived']\n\nX_data.loc[:, 'Age'] = X_data['Age'].fillna(X_data['Age'].mean())\nX_test.loc[:, 'Age'] = X_test['Age'].fillna(X_data['Age'].mean())\nX_data.loc[:, 'Embarked'] = X_data['Embarked'].fillna(X_data['Embarked'].mode()[0])\nX_test.loc[:, 'Embarked'] = X_test['Embarked'].fillna(X_data['Embarked'].mode()[0])\n\nX_data","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T18:44:56.875622Z","iopub.execute_input":"2024-12-08T18:44:56.876595Z","iopub.status.idle":"2024-12-08T18:44:56.898326Z","shell.execute_reply.started":"2024-12-08T18:44:56.876554Z","shell.execute_reply":"2024-12-08T18:44:56.897248Z"}},"outputs":[{"execution_count":99,"output_type":"execute_result","data":{"text/plain":"     Pclass     Sex        Age  SibSp  Parch     Fare Embarked Cabin\n0         3    male  22.000000      1      0   7.2500        S   NaN\n1         1  female  38.000000      1      0  71.2833        C   C85\n2         3  female  26.000000      0      0   7.9250        S   NaN\n3         1  female  35.000000      1      0  53.1000        S  C123\n4         3    male  35.000000      0      0   8.0500        S   NaN\n..      ...     ...        ...    ...    ...      ...      ...   ...\n886       2    male  27.000000      0      0  13.0000        S   NaN\n887       1  female  19.000000      0      0  30.0000        S   B42\n888       3  female  29.699118      1      2  23.4500        S   NaN\n889       1    male  26.000000      0      0  30.0000        C  C148\n890       3    male  32.000000      0      0   7.7500        Q   NaN\n\n[891 rows x 8 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n      <th>Cabin</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>3</td>\n      <td>male</td>\n      <td>22.000000</td>\n      <td>1</td>\n      <td>0</td>\n      <td>7.2500</td>\n      <td>S</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>female</td>\n      <td>38.000000</td>\n      <td>1</td>\n      <td>0</td>\n      <td>71.2833</td>\n      <td>C</td>\n      <td>C85</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>female</td>\n      <td>26.000000</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.9250</td>\n      <td>S</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>female</td>\n      <td>35.000000</td>\n      <td>1</td>\n      <td>0</td>\n      <td>53.1000</td>\n      <td>S</td>\n      <td>C123</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>3</td>\n      <td>male</td>\n      <td>35.000000</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.0500</td>\n      <td>S</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>886</th>\n      <td>2</td>\n      <td>male</td>\n      <td>27.000000</td>\n      <td>0</td>\n      <td>0</td>\n      <td>13.0000</td>\n      <td>S</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>887</th>\n      <td>1</td>\n      <td>female</td>\n      <td>19.000000</td>\n      <td>0</td>\n      <td>0</td>\n      <td>30.0000</td>\n      <td>S</td>\n      <td>B42</td>\n    </tr>\n    <tr>\n      <th>888</th>\n      <td>3</td>\n      <td>female</td>\n      <td>29.699118</td>\n      <td>1</td>\n      <td>2</td>\n      <td>23.4500</td>\n      <td>S</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>889</th>\n      <td>1</td>\n      <td>male</td>\n      <td>26.000000</td>\n      <td>0</td>\n      <td>0</td>\n      <td>30.0000</td>\n      <td>C</td>\n      <td>C148</td>\n    </tr>\n    <tr>\n      <th>890</th>\n      <td>3</td>\n      <td>male</td>\n      <td>32.000000</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.7500</td>\n      <td>Q</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n<p>891 rows × 8 columns</p>\n</div>"},"metadata":{}}],"execution_count":99},{"cell_type":"code","source":"X_data['Cabin'] = X_data['Cabin'].fillna(False).apply(lambda x: True if x else False)\nX_test['Cabin'] = X_test['Cabin'].fillna(False).apply(lambda x: True if x else False)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T18:48:58.744917Z","iopub.execute_input":"2024-12-08T18:48:58.745939Z","iopub.status.idle":"2024-12-08T18:48:58.753300Z","shell.execute_reply.started":"2024-12-08T18:48:58.745898Z","shell.execute_reply":"2024-12-08T18:48:58.752074Z"}},"outputs":[],"execution_count":111},{"cell_type":"code","source":"X_data = pd.get_dummies(X_data, columns=['Sex', 'SibSp', 'Embarked'])\nX_test = pd.get_dummies(X_test, columns=['Sex', 'SibSp', 'Embarked'])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T18:49:46.959008Z","iopub.execute_input":"2024-12-08T18:49:46.959432Z","iopub.status.idle":"2024-12-08T18:49:46.974174Z","shell.execute_reply.started":"2024-12-08T18:49:46.959398Z","shell.execute_reply":"2024-12-08T18:49:46.973408Z"}},"outputs":[],"execution_count":112},{"cell_type":"code","source":"X_train, X_holdout, y_train, y_holdout = train_test_split(X_data, y_data, train_size=0.7)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T18:50:14.872841Z","iopub.execute_input":"2024-12-08T18:50:14.873197Z","iopub.status.idle":"2024-12-08T18:50:14.880998Z","shell.execute_reply.started":"2024-12-08T18:50:14.873165Z","shell.execute_reply":"2024-12-08T18:50:14.879943Z"}},"outputs":[],"execution_count":113},{"cell_type":"code","source":"forest_grid = GridSearchCV(forest, param_grid=forest_params, n_jobs=-1, verbose=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T18:50:43.510712Z","iopub.execute_input":"2024-12-08T18:50:43.511080Z","iopub.status.idle":"2024-12-08T18:50:43.516336Z","shell.execute_reply.started":"2024-12-08T18:50:43.511038Z","shell.execute_reply":"2024-12-08T18:50:43.514994Z"}},"outputs":[],"execution_count":114},{"cell_type":"code","source":"forest_grid.fit(X_train, y_train)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T18:50:53.382739Z","iopub.execute_input":"2024-12-08T18:50:53.383474Z","iopub.status.idle":"2024-12-08T18:51:04.701991Z","shell.execute_reply.started":"2024-12-08T18:50:53.383430Z","shell.execute_reply":"2024-12-08T18:51:04.700769Z"}},"outputs":[{"name":"stdout","text":"Fitting 5 folds for each of 20 candidates, totalling 100 fits\n","output_type":"stream"},{"execution_count":115,"output_type":"execute_result","data":{"text/plain":"GridSearchCV(estimator=RandomForestClassifier(n_jobs=-1), n_jobs=-1,\n             param_grid={'max_depth': [5, 6, 7, 8, 9],\n                         'min_samples_leaf': [1, 2, 3, 4]},\n             verbose=True)","text/html":"<style>#sk-container-id-4 {color: black;background-color: white;}#sk-container-id-4 pre{padding: 0;}#sk-container-id-4 div.sk-toggleable {background-color: white;}#sk-container-id-4 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-4 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-4 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-4 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-4 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-4 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-4 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-4 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-4 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-4 div.sk-item {position: relative;z-index: 1;}#sk-container-id-4 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-4 div.sk-item::before, #sk-container-id-4 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-4 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-4 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-4 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-4 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-4 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-4 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-4 div.sk-label-container {text-align: center;}#sk-container-id-4 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-4 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(estimator=RandomForestClassifier(n_jobs=-1), n_jobs=-1,\n             param_grid={&#x27;max_depth&#x27;: [5, 6, 7, 8, 9],\n                         &#x27;min_samples_leaf&#x27;: [1, 2, 3, 4]},\n             verbose=True)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" ><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GridSearchCV</label><div class=\"sk-toggleable__content\"><pre>GridSearchCV(estimator=RandomForestClassifier(n_jobs=-1), n_jobs=-1,\n             param_grid={&#x27;max_depth&#x27;: [5, 6, 7, 8, 9],\n                         &#x27;min_samples_leaf&#x27;: [1, 2, 3, 4]},\n             verbose=True)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-7\" type=\"checkbox\" ><label for=\"sk-estimator-id-7\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(n_jobs=-1)</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-8\" type=\"checkbox\" ><label for=\"sk-estimator-id-8\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(n_jobs=-1)</pre></div></div></div></div></div></div></div></div></div></div>"},"metadata":{}}],"execution_count":115},{"cell_type":"code","source":"print(f'best forest train_data accuracy = {accuracy_score(forest_grid.predict(X_data), y_data)}')\nprint(f'best forest holdout_data accuracy = {accuracy_score(forest_grid.predict(X_holdout), y_holdout)}')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T18:51:13.964158Z","iopub.execute_input":"2024-12-08T18:51:13.964562Z","iopub.status.idle":"2024-12-08T18:51:14.068410Z","shell.execute_reply.started":"2024-12-08T18:51:13.964526Z","shell.execute_reply":"2024-12-08T18:51:14.067394Z"}},"outputs":[{"name":"stdout","text":"best forest train_data accuracy = 0.8597081930415263\nbest forest holdout_data accuracy = 0.8619402985074627\n","output_type":"stream"}],"execution_count":116},{"cell_type":"code","source":"X_test.loc[:, 'Fare'] = X_test['Fare'].fillna(X_test['Fare'].mean())\nprediction = forest_grid.predict(X_test)\nsubmission = pd.DataFrame({'PassengerID':test_data['PassengerId'], 'Survived': prediction})\nsubmission.to_csv('submission.csv', index=False)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T18:52:29.505770Z","iopub.execute_input":"2024-12-08T18:52:29.506172Z","iopub.status.idle":"2024-12-08T18:52:29.564559Z","shell.execute_reply.started":"2024-12-08T18:52:29.506134Z","shell.execute_reply":"2024-12-08T18:52:29.563587Z"}},"outputs":[],"execution_count":117},{"cell_type":"code","source":"train_data['Survived'].value_counts(normalize=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T18:55:07.308154Z","iopub.execute_input":"2024-12-08T18:55:07.309121Z","iopub.status.idle":"2024-12-08T18:55:07.319572Z","shell.execute_reply.started":"2024-12-08T18:55:07.309055Z","shell.execute_reply":"2024-12-08T18:55:07.318326Z"}},"outputs":[{"execution_count":121,"output_type":"execute_result","data":{"text/plain":"Survived\n0    0.616162\n1    0.383838\nName: proportion, dtype: float64"},"metadata":{}}],"execution_count":121},{"cell_type":"code","source":"X_test.loc[0].to_dict()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T18:59:51.958049Z","iopub.execute_input":"2024-12-08T18:59:51.959190Z","iopub.status.idle":"2024-12-08T18:59:51.967413Z","shell.execute_reply.started":"2024-12-08T18:59:51.959130Z","shell.execute_reply":"2024-12-08T18:59:51.966252Z"}},"outputs":[{"execution_count":126,"output_type":"execute_result","data":{"text/plain":"{'Pclass': 3,\n 'Age': 34.5,\n 'Parch': 0,\n 'Fare': 7.8292,\n 'Cabin': False,\n 'Sex_female': False,\n 'Sex_male': True,\n 'SibSp_0': True,\n 'SibSp_1': False,\n 'SibSp_2': False,\n 'SibSp_3': False,\n 'SibSp_4': False,\n 'SibSp_5': False,\n 'SibSp_8': False,\n 'Embarked_C': False,\n 'Embarked_Q': True,\n 'Embarked_S': False}"},"metadata":{}}],"execution_count":126},{"cell_type":"code","source":"me = {'Pclass': 3,\n 'Age': 16,\n 'Parch': 0,\n 'Fare': 7.8292,\n 'Cabin': False,\n 'Sex_female': True,\n 'Sex_male': False,\n 'SibSp_0': False,\n 'SibSp_1': False,\n 'SibSp_2': False,\n 'SibSp_3': False,\n 'SibSp_4': False,\n 'SibSp_5': False,\n 'SibSp_8': False,\n 'Embarked_C': False,\n 'Embarked_Q': True,\n 'Embarked_S': False}","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T19:06:36.514159Z","iopub.execute_input":"2024-12-08T19:06:36.514602Z","iopub.status.idle":"2024-12-08T19:06:36.520195Z","shell.execute_reply.started":"2024-12-08T19:06:36.514566Z","shell.execute_reply":"2024-12-08T19:06:36.519060Z"}},"outputs":[],"execution_count":138},{"cell_type":"code","source":"forest_grid.predict(pd.DataFrame(me.values(), me.keys()).T)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-08T19:06:38.240091Z","iopub.execute_input":"2024-12-08T19:06:38.240994Z","iopub.status.idle":"2024-12-08T19:06:38.275166Z","shell.execute_reply.started":"2024-12-08T19:06:38.240955Z","shell.execute_reply":"2024-12-08T19:06:38.274112Z"}},"outputs":[{"execution_count":139,"output_type":"execute_result","data":{"text/plain":"array([1])"},"metadata":{}}],"execution_count":139},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}